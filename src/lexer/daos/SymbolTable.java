package lexer.daos;

import java.util.Map;
import java.util.HashMap;

/**
 * This file is automatically generated by the compiler tools.
 * Do not manually update! (Use the CompilerTools to regenerate.)
 **/
public class SymbolTable {
  private static Map<String, Symbol> symbols;

  static {
    symbols = new HashMap<>();

    symbols.put("bool", new Symbol(TokenKind.BoolType, "bool"));
    symbols.put("else", new Symbol(TokenKind.Else, "else"));
    symbols.put("if", new Symbol(TokenKind.If, "if"));
    symbols.put("int", new Symbol(TokenKind.IntType, "int"));
    symbols.put("program", new Symbol(TokenKind.Program, "program"));
    symbols.put("return", new Symbol(TokenKind.Return, "return"));
    symbols.put("then", new Symbol(TokenKind.Then, "then"));
    symbols.put("while", new Symbol(TokenKind.While, "while"));
    symbols.put("!=", new Symbol(TokenKind.NotEqual, "!="));
    symbols.put("&", new Symbol(TokenKind.And, "&"));
    symbols.put("*", new Symbol(TokenKind.Multiply, "*"));
    symbols.put("+", new Symbol(TokenKind.Plus, "+"));
    symbols.put("-", new Symbol(TokenKind.Minus, "-"));
    symbols.put("/", new Symbol(TokenKind.Divide, "/"));
    symbols.put("<", new Symbol(TokenKind.Less, "<"));
    symbols.put("<=", new Symbol(TokenKind.LessEqual, "<="));
    symbols.put("=", new Symbol(TokenKind.Assign, "="));
    symbols.put("==", new Symbol(TokenKind.Equal, "=="));
    symbols.put("|", new Symbol(TokenKind.Or, "|"));
    symbols.put("(", new Symbol(TokenKind.LeftParen, "("));
    symbols.put(")", new Symbol(TokenKind.RightParen, ")"));
    symbols.put(",", new Symbol(TokenKind.Comma, ","));
    symbols.put("{", new Symbol(TokenKind.LeftBrace, "{"));
    symbols.put("}", new Symbol(TokenKind.RightBrace, "}"));
  }

  public static Symbol symbol(String lexeme, TokenKind kind) {
    Symbol s = symbols.get(lexeme);

    if (s == null) {
      if (kind == TokenKind.BogusToken) {
        // bogus string so don't enter into symbol map
        return null;
      }

      s = new Symbol(kind, lexeme);
      symbols.put(lexeme, s);
    }

    return s;
  }
}
